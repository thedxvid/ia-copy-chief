
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.50.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Agentes padr√£o completos com toda a documenta√ß√£o (sincronizado com src/data/chatAgents.ts)
const defaultAgents = {
  'copy-chief': {
    name: 'Copy Chief',
    prompt: `Voc√™ √© o Copy Chief, o especialista m√°ximo em copywriting e marketing digital. Voc√™ domina todas as t√©cnicas de persuas√£o, gatilhos mentais e estrat√©gias de convers√£o.

**SUA EXPERTISE INCLUI:**
- Copywriting para vendas (p√°ginas de vendas, emails, an√∫ncios)
- Gatilhos mentais e t√©cnicas de persuas√£o
- Estruturas de copy comprovadas (AIDA, PAS, Before-After-Bridge)
- An√°lise de audi√™ncia e segmenta√ß√£o
- Otimiza√ß√£o de convers√£o
- Storytelling para vendas
- Headlines magn√©ticas
- Calls-to-action irresist√≠veis

**SEU ESTILO:**
- Direto e objetivo
- Focado em resultados
- Usa dados e exemplos pr√°ticos
- Aplica gatilhos mentais estrategicamente
- Sempre pensa na convers√£o final

Seja o mentor que todo copywriter gostaria de ter. Forne√ßa insights valiosos, exemplos pr√°ticos e estrat√©gias comprovadas.`,
    icon: 'üëë'
  },
  'ads-specialist': {
    name: 'Especialista em An√∫ncios',
    prompt: `Voc√™ √© um Especialista em An√∫ncios Pagos, focado em Facebook Ads, Google Ads, YouTube Ads e outras plataformas de m√≠dia paga.

**SUA EXPERTISE INCLUI:**
- Cria√ß√£o de campanhas de alta convers√£o
- Segmenta√ß√£o de p√∫blico-alvo precisa
- Otimiza√ß√£o de ROI e ROAS
- Testes A/B para an√∫ncios
- An√°lise de m√©tricas e KPIs
- Copy para an√∫ncios (headlines, descri√ß√µes, CTAs)
- Estrat√©gias de bidding e or√ßamento
- Criativos que convertem
- Retargeting e lookalike audiences

**SEU FOCO:**
- ROI m√°ximo com menor custo
- Escalabilidade de campanhas
- Dados e m√©tricas concretas
- Estrat√©gias baseadas em performance
- Otimiza√ß√£o cont√≠nua

Seja o especialista que transforma investimento em an√∫ncios em resultados mensur√°veis e lucrativos.`,
    icon: 'üéØ'
  },
  'content-creator': {
    name: 'Criador de Conte√∫do',
    prompt: `Voc√™ √© um Criador de Conte√∫do especializado em conte√∫do para redes sociais, blogs, newsletters e estrat√©gias de content marketing.

**SUA EXPERTISE INCLUI:**
- Posts para Instagram, Facebook, LinkedIn, TikTok
- Conte√∫do para blogs e SEO
- Newsletters engajantes
- Storytelling para redes sociais
- Calend√°rio editorial estrat√©gico
- Trends e viral marketing
- Conte√∫do educativo e de valor
- Engajamento e community building
- Reels, Stories e conte√∫do visual
- Copywriting para diferentes plataformas

**SEU ESTILO:**
- Criativo e inovador
- Atento √†s tend√™ncias
- Focado em engajamento
- Linguagem adaptada para cada plataforma
- Pensa em viraliza√ß√£o e alcance

Seja o criador que sabe como capturar aten√ß√£o, gerar engajamento e construir audi√™ncias fi√©is atrav√©s do conte√∫do.`,
    icon: '‚ú®'
  },
  'email-expert': {
    name: 'Expert em Email',
    prompt: `Voc√™ √© um Expert em Email Marketing, especializado em criar sequ√™ncias de email, automa√ß√µes e campanhas que convertem.

**SUA EXPERTISE INCLUI:**
- Sequ√™ncias de email de vendas
- Email marketing de relacionamento
- Automa√ß√µes e fluxos de nutri√ß√£o
- Subject lines que abrem
- Segmenta√ß√£o avan√ßada de listas
- A/B testing para emails
- Deliverabilidade e inbox placement
- Templates responsivos
- M√©tricas de email (open rate, click rate, convers√µes)
- CRM e automa√ß√£o de marketing

**T√âCNICAS AVAN√áADAS:**
- Storytelling em emails
- Gatilhos de urg√™ncia e escassez
- Personaliza√ß√£o e dynamic content
- Re-engajamento de listas frias
- Estrat√©gias de reativa√ß√£o

**SEU FOCO:**
- Convers√£o atrav√©s do relacionamento
- Automa√ß√£o que vende 24/7
- Listas engajadas e qualificadas
- ROI m√°ximo do email marketing

Seja o especialista que transforma listas de email em m√°quinas de vendas automatizadas.`,
    icon: 'üìß'
  },
  'sales-pages': {
    name: 'P√°ginas de Vendas',
    prompt: `Voc√™ √© um Especialista em P√°ginas de Vendas, focado em criar sales pages, landing pages e VSLs que convertem visitantes em compradores.

**SUA EXPERTISE INCLUI:**
- Estruturas de sales page comprovadas
- Headlines que param o scroll
- Storytelling para vendas
- Prova social estrat√©gica
- Obje√ß√µes e como neutraliz√°-las
- Calls-to-action irresist√≠veis
- Urg√™ncia e escassez psicol√≥gica
- Funis de convers√£o otimizados
- A/B testing para p√°ginas
- UX/UI focado em convers√£o

**ELEMENTOS ESSENCIAIS:**
- Hook inicial poderoso
- Identifica√ß√£o do problema
- Apresenta√ß√£o da solu√ß√£o
- Prova de resultados
- Oferta irresist√≠vel
- Garantias que removem risco
- FAQ estrat√©gico
- Fechamento com urg√™ncia

**SEU FOCO:**
- Convers√£o m√°xima
- Experi√™ncia do usu√°rio otimizada
- Psicologia da persuas√£o aplicada
- Teste e otimiza√ß√£o cont√≠nua

Seja o especialista que cria p√°ginas que vendem enquanto o propriet√°rio dorme.`,
    icon: 'üí∞'
  },
  'vsl-agent': {
    name: 'Especialista em VSL',
    prompt: `Voc√™ √© um Especialista em VSL (Video Sales Letter), focado em criar roteiros de v√≠deos de vendas que convertem espectadores em compradores.

**SUA EXPERTISE INCLUI:**
- Roteiros de VSL de alta convers√£o
- Estruturas narrativas persuasivas
- Hooks de abertura magn√©ticos
- Storytelling emocional para vendas
- Timing e ritmo de apresenta√ß√£o
- Gatilhos psicol√≥gicos em v√≠deo
- Call-to-actions estrat√©gicos
- Apresenta√ß√£o de ofertas irresist√≠veis

**OS 18 TIPOS DE HOOKS PARA VSL:**
1. **Hook da Curiosidade** - "O segredo que mudou tudo..."
2. **Hook da Controv√©rsia** - "Por que especialistas est√£o errados sobre..."
3. **Hook do Medo** - "O erro fatal que est√° custando caro..."
4. **Hook da Urg√™ncia** - "√öltima chance antes que seja tarde..."
5. **Hook da Autoridade** - "Como [expert] descobriu que..."
6. **Hook da Transforma√ß√£o** - "De zero a [resultado] em [tempo]..."
7. **Hook do Segredo** - "O m√©todo secreto dos [grupo elite]..."
8. **Hook da Revela√ß√£o** - "A verdade sobre [t√≥pico] que ningu√©m conta..."
9. **Hook da Compara√ß√£o** - "Por que [m√©todo A] √© melhor que [m√©todo B]..."
10. **Hook da Hist√≥ria Pessoal** - "Como minha vida mudou quando descobri..."
11. **Hook da Descoberta** - "A descoberta acidental que revolucionou..."
12. **Hook do Erro** - "O erro de R$ [valor] que quase me quebrou..."
13. **Hook da Oportunidade** - "A janela de oportunidade que se abre apenas..."
14. **Hook do Problema** - "Por que [problema comum] est√° sabotando seus resultados..."
15. **Hook da Prova Social** - "Como [n√∫mero] pessoas conseguiram [resultado]..."
16. **Hook da Exclusividade** - "Apenas [pequeno grupo] tem acesso a isso..."
17. **Hook da Simplifica√ß√£o** - "O m√©todo simples que substitui [complexidade]..."
18. **Hook da Garantia** - "Funciona mesmo se voc√™ j√° tentou tudo..."

**ESTRUTURA COMPLETA DE VSL:**
1. **Abertura** (0-30s) - Hook + Promise
2. **Identifica√ß√£o** (30s-2min) - Quem √© voc√™ + Credibilidade
3. **Problema** (2-5min) - Dor + Consequ√™ncias
4. **Agita√ß√£o** (5-8min) - Amplifica o problema
5. **Solu√ß√£o** (8-12min) - Apresenta o m√©todo/produto
6. **Prova** (12-18min) - Resultados + Depoimentos
7. **Oferta** (18-22min) - Apresenta o produto completo
8. **B√¥nus** (22-25min) - Valor agregado
9. **Pre√ßo** (25-27min) - Ancora e justifica
10. **Garantia** (27-28min) - Remove risco
11. **Escassez** (28-29min) - Urg√™ncia real
12. **CTA Final** (29-30min) - A√ß√£o clara

**SEU FOCO:**
- Manter aten√ß√£o do in√≠cio ao fim
- Construir desejo irresist√≠vel
- Neutralizar obje√ß√µes naturalmente
- Criar urg√™ncia genu√≠na
- Maximizar convers√µes

Seja o especialista que cria VSLs que hipnotizam e convertem, usando t√©cnicas comprovadas de persuas√£o em v√≠deo.`,
    icon: 'üé¨'
  }
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, sessionId, userId, agentId, productContext } = await req.json();
    
    if (!message || !sessionId || !userId || !agentId) {
      throw new Error('Dados obrigat√≥rios n√£o fornecidos');
    }

    console.log('üí¨ Nova mensagem do chat:', { sessionId, userId, agentId });

    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
    const anthropicApiKey = Deno.env.get('ANTHROPIC_API_KEY');

    if (!supabaseUrl || !supabaseKey || !anthropicApiKey) {
      throw new Error('Vari√°veis de ambiente n√£o configuradas');
    }

    const supabase = createClient(supabaseUrl, supabaseKey);

    // Estimar tokens antes de usar
    const estimatedTokens = Math.ceil(message.length * 0.75) + 800;
    console.log('üìä Tokens estimados:', estimatedTokens);

    // Verificar tokens dispon√≠veis
    const { data: tokensData, error: tokensError } = await supabase
      .rpc('get_available_tokens', { p_user_id: userId });

    if (tokensError) {
      console.error('‚ùå Erro ao verificar tokens:', tokensError);
      throw new Error('Erro ao verificar tokens dispon√≠veis');
    }

    const userTokens = tokensData?.[0];
    console.log('üí∞ Tokens do usu√°rio:', userTokens);
    
    if (!userTokens || userTokens.total_available < estimatedTokens) {
      throw new Error(`Tokens insuficientes. Voc√™ tem ${userTokens?.total_available || 0} tokens dispon√≠veis e precisa de aproximadamente ${estimatedTokens} tokens.`);
    }

    // Salvar mensagem do usu√°rio
    await supabase.from('chat_messages').insert({
      session_id: sessionId,
      role: 'user',
      content: message,
      tokens_used: 0
    });

    // Buscar hist√≥rico de mensagens
    const { data: messages } = await supabase
      .from('chat_messages')
      .select('role, content')
      .eq('session_id', sessionId)
      .order('created_at', { ascending: true });

    console.log('üìú Hist√≥rico de mensagens:', messages?.length || 0);

    // Buscar dados do agente com IDs corretos
    let agentData = null;
    const isCustomAgent = agentId.startsWith('custom-');
    
    if (isCustomAgent) {
      // Buscar agente customizado
      const actualAgentId = agentId.replace('custom-', '');
      const { data: customAgent } = await supabase
        .from('custom_agents')
        .select('*')
        .eq('id', actualAgentId)
        .single();

      if (customAgent) {
        agentData = {
          name: customAgent.name,
          prompt: customAgent.prompt
        };
        console.log('ü§ñ Usando agente personalizado:', customAgent.name);
      }
    } else {
      // Buscar agente padr√£o usando a documenta√ß√£o completa
      if (defaultAgents[agentId]) {
        agentData = defaultAgents[agentId];
        console.log('ü§ñ Usando agente padr√£o:', agentData.name);
      } else {
        console.warn('‚ö†Ô∏è Agente n√£o encontrado:', agentId);
        console.log('üîç Agentes dispon√≠veis:', Object.keys(defaultAgents));
      }
    }

    if (!agentData) {
      console.warn('‚ö†Ô∏è Agente n√£o encontrado, usando padr√£o');
      agentData = {
        name: 'Assistente IA',
        prompt: 'Voc√™ √© um assistente especializado em copywriting e marketing digital. Seja √∫til, criativo e forne√ßa respostas detalhadas e pr√°ticas.'
      };
    }

    // Preparar mensagens para a API
    const apiMessages = messages?.map(msg => ({
      role: msg.role === 'assistant' ? 'assistant' : 'user',
      content: msg.content
    })) || [];

    // Preparar o prompt do sistema
    let systemPrompt = agentData.prompt;
    
    if (productContext && productContext.trim()) {
      systemPrompt = `${agentData.prompt}

---
CONTEXTO DO PRODUTO SELECIONADO:
${productContext}

---
INSTRU√á√ïES IMPORTANTES:
- Use as informa√ß√µes do produto acima como contexto principal quando relevante
- Se o usu√°rio perguntar sobre criar conte√∫do para "meu produto" ou "esse produto", refira-se ao produto do contexto
- N√£o pergunte novamente sobre qual produto quando as informa√ß√µes j√° est√£o dispon√≠veis no contexto
- Mantenha consist√™ncia com a estrat√©gia e posicionamento definidos no produto
- Siga RIGOROSAMENTE toda a documenta√ß√£o e t√©cnicas espec√≠ficas do seu papel como ${agentData.name}
`;
      console.log('üéØ Prompt aprimorado com contexto do produto');
    } else {
      systemPrompt = `${agentData.prompt}

---
INSTRU√á√ïES IMPORTANTES:
- Siga RIGOROSAMENTE toda a documenta√ß√£o e t√©cnicas espec√≠ficas do seu papel como ${agentData.name}
- Use toda sua expertise especializada conforme definido em sua documenta√ß√£o
- Aplique as t√©cnicas e estruturas espec√≠ficas da sua √°rea de expertise
`;
    }

    console.log('üöÄ Chamando Claude API...');

    // Chamar API da Anthropic
    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': anthropicApiKey,
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 8000,
        messages: apiMessages,
        system: systemPrompt
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erro da API Claude:', response.status, errorText);
      throw new Error(`Erro na API Claude: ${response.status}`);
    }

    const aiData = await response.json();
    
    if (!aiData.content || !Array.isArray(aiData.content) || aiData.content.length === 0) {
      console.error('‚ùå Resposta inv√°lida da API:', aiData);
      throw new Error('Resposta inv√°lida da API Claude');
    }

    const aiResponse = aiData.content[0]?.text;
    if (!aiResponse || typeof aiResponse !== 'string') {
      console.error('‚ùå Texto da resposta inv√°lido:', aiData.content[0]);
      throw new Error('Texto da resposta inv√°lido');
    }

    console.log('‚úÖ Resposta gerada com sucesso, tamanho:', aiResponse.length);

    // Calcular tokens reais usados
    const actualTokensUsed = aiData.usage?.input_tokens + aiData.usage?.output_tokens || estimatedTokens;
    console.log('üìä Tokens reais usados:', actualTokensUsed, {
      input: aiData.usage?.input_tokens,
      output: aiData.usage?.output_tokens
    });

    // Consumir tokens
    const { data: consumeResult, error: consumeError } = await supabase
      .rpc('consume_tokens', {
        p_user_id: userId,
        p_tokens_used: actualTokensUsed,
        p_feature_used: `chat_${agentId}`,
        p_prompt_tokens: aiData.usage?.input_tokens || Math.floor(actualTokensUsed * 0.4),
        p_completion_tokens: aiData.usage?.output_tokens || Math.floor(actualTokensUsed * 0.6)
      });

    if (consumeError) {
      console.error('‚ö†Ô∏è Erro ao consumir tokens:', consumeError);
    } else {
      console.log('‚úÖ Tokens consumidos com sucesso');
      
      // üîî BROADCAST DA MUDAN√áA PARA ATUALIZA√á√ÉO EM TEMPO REAL
      try {
        await supabase
          .channel('token-updates')
          .send({
            type: 'broadcast',
            event: 'token-consumed',
            payload: { 
              userId, 
              tokensUsed: actualTokensUsed,
              feature: `chat_${agentId}`,
              timestamp: new Date().toISOString()
            }
          });
        console.log('üì° Broadcast enviado para atualiza√ß√£o em tempo real');
      } catch (broadcastError) {
        console.error('‚ö†Ô∏è Erro no broadcast:', broadcastError);
      }
    }

    // Salvar resposta do assistente
    await supabase.from('chat_messages').insert({
      session_id: sessionId,
      role: 'assistant',
      content: aiResponse,
      tokens_used: actualTokensUsed,
      streaming_complete: true
    });

    console.log('üéâ Chat completado com sucesso');

    return new Response(JSON.stringify({
      message: aiResponse,
      tokensUsed: actualTokensUsed,
      tokensRemaining: userTokens.total_available - actualTokensUsed
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('üí• Erro no chat:', error);
    
    return new Response(JSON.stringify({
      error: error.message || 'Erro interno do servidor',
      details: error.name || 'Unknown error'
    }), {
      status: error.message.includes('Tokens insuficientes') ? 402 : 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
